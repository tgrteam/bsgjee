

#region license

/// <License>
/// <FileLabel>BearcatSoft(R) Library</FileLabel>
/// <Copyrights>Copyright (C) 2003 - 2004, BearcatSoft(R). All rights reserved.
/// The software and associated documentation supplied hereunder 
/// are the proprietary information of BearcatSoft(R) and are supplied 
/// subject to licence terms.
/// </Copyrights>
/// <Product>This file was generated by BearcatSoft Genarator(R)</Product>
/// <LicenseDetails>http://BearcatSoft.no-ip.com/GeneratorLicense</LicenseDetails>
/// <LicenseDetails2>http://www.BearcatSoft.com/GeneratorLicense</LicenseDetails2>
/// <Contact>http://BearcatSoft.no-ip.com</Contact>
/// <Contact2>http://www.BearcatSoft.com</Contact2>
/// <Company>BearcatSoft(R)</Company>
/// <Trademarks>BearcatSoft(R), BearcatSoft Generator(R) are a registered trademarks of BearcatSoft company</Trademarks>
/// </License>
/// 
#endregion

#region usings

using System;
using System.Collections.Specialized ;

using BearcatSoft.BSGen.Framework;
using BearcatSoft.BSGen.Framework.Components.CBSGFieldItem;
using BearcatSoft.BSGen.Framework.Components.CBSGFieldItemGroup;
using BearcatSoft.BSGen.Framework.Components.CBSGClass ;
using BearcatSoft.BSGen.Framework.Components.CBSGTemplate;
using BearcatSoft.BSGen.Framework.Components.CBSGView ;
using BearcatSoft.BSGen.Framework.Components.CBSGForeignField ;
using BearcatSoft.BSGen.Framework.Components.CBSGForeignFieldGroup ;

using BearcatSoft.BSGen.Engine.Classes.FieldsHelpers;
using BearcatSoft.BSGen.Engine.Generator.Components ;
using BearcatSoft.BSGen.Engine.Classes.ModelHelpers ;
using BearcatSoft.BSGen.EngineF35.Generator.DataAccessProjects.BSGA.Components.DAL.Providers;
#endregion


namespace BearcatSoft.BSGen.EngineF35.Generator.oraclejee_mvc.src.etp.vm.gen.managedbeans
{	

	[GenerateANDCondition(new string[]{"GENER_LIB_DATAACCESS_DATAACCESS"})]
    [BSGTemplate(typeof(BSGClass), SourceCodeType.Java_SourceCodeType, @"oraclejee-mvc\src\etp\vm\gen\managedbeans")]
    public class BSG_OracleJEE_Controller : ProxyBaseClass
	{

        #region protected override Generate functions

		protected override void GenerateSourceForModel(BearcatSoft.BSGen.Framework.Components.CBSGModel.BSGModel item, BSGSourceFile src)
		{
		}

		protected override void GenerateSource(
            BSGClass item
            , BSGSourceFile src)
		{
            BearcatSoft.BSGen.Framework.Components.CBSGCLSType.BSGCLSType.BSGCLSType_Modified = "java";
            //BearcatSoft.BSGen.Framework.Components.CBSGCLSType.BSGCLSType.BSGCLSType_Modified = "java";

            this.InitializeGenerator(
                item
                , src
                , ModelForGenerator);

            src.FileName = "" + this.IBSBSGClass.MHIBSNameJavaCase + @"Controller";

            this.IBSBSGClass.SetChoosedDataSet_First();
            
            this.Src.AddLn(@"
package etp.vm.gen.managedbeans;

import etp.vm.gen.entity." + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @";
import etp.vm.gen.managedbeans.util.JsfUtil;
import etp.vm.gen.managedbeans.util.PaginationHelper;
import etp.vm.gen.session." + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"Facade;

import java.io.Serializable;
import java.util.ResourceBundle;
import javax.ejb.EJB;
import javax.inject.Named;
import javax.enterprise.context.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;

");

 this.Src.AddLn(@"
@Named(" + PP() + this.IBSBSGClass.MHIBSNameJavaCaseLower + @"Controller" + PP() + @")");

this.Src.AddLn(@"
@SessionScoped");

this.Src.AddLn(@"
public class " + this.IBSBSGClass.MHIBSNameJavaCase + @"Controller implements Serializable {");

            this.Src.AddLn(@"


    private " + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @" current;
    private DataModel items = null;
");

            this.Src.AddLn(@"
    @EJB
    private etp.vm.gen.session." + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"Facade ejbFacade;
 ");

            this.Src.AddLn(@"   private PaginationHelper pagination;
    private int selectedItemIndex;
");

            this.Src.AddLn(@"
    public " + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"Controller() {
    }
");

            this.Src.AddLn(@"
    public " + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @" getSelected() {
        if (current == null) {
            current = new " + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"();
            current.set" + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"PK(new etp.vm.gen.entity." + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"PK());
            selectedItemIndex = -1;
        }
        return current;
    }
");

            this.Src.AddLn(@"
    private " + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"Facade getFacade() {
        return ejbFacade;
    }
");

            this.Src.AddLn(@"
    public PaginationHelper getPagination() {
        if (pagination == null) {
            pagination = new PaginationHelper(10) {

                @Override
                public int getItemsCount() {
                    return getFacade().count();
                }

                @Override
                public DataModel createPageDataModel() {
                    return new ListDataModel(getFacade().findRange(new int[]{getPageFirstItem(), getPageFirstItem() + getPageSize()}));
                }
            };
        }
        return pagination;
    }
");

            this.Src.AddLn(@"
    public String prepareList() {
        recreateModel();
        return " + PP() + @"List" + PP() + @";
    }
");

            this.Src.AddLn(@"
    public String prepareView() {
        current = (" + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @") getItems().getRowData();
        selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        return " + PP() + @"View" + PP() + @";
    }
");

            this.Src.AddLn(@"
    public String prepareCreate() {
        current = new " + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"();
        current.set" + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"PK(new etp.vm.gen.entity." + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"PK());
        selectedItemIndex = -1;
        return " + PP() + @"Create" + PP() + @";
    }
");

            this.Src.AddLn(@"
    public String create() {
        try {
            getFacade().create(current);
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle(" + PP() + @"/Bundle" + PP() + @").getString(" + PP() + @"" + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"Created" + PP() + @"));
            return prepareCreate();
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, ResourceBundle.getBundle(" + PP() + @"/Bundle" + PP() + @").getString(" + PP() + @"PersistenceErrorOccured" + PP() + @"));
            return null;
        }
    }
");

            this.Src.AddLn(@"
    public String prepareEdit() {
        current = (" + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @") getItems().getRowData();
        selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        return " + PP() + @"Edit" + PP() + @";
    }
");

            this.Src.AddLn(@"
    public String update() {
        try {
            getFacade().edit(current);
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle(" + PP() + @"/Bundle" + PP() + @").getString(" + PP() + @"" + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"Updated" + PP() + @"));
            return " + PP() + @"View" + PP() + @";
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, ResourceBundle.getBundle(" + PP() + @"/Bundle" + PP() + @").getString(" + PP() + @"PersistenceErrorOccured" + PP() + @"));
            return null;
        }
    }
");

            this.Src.AddLn(@"
    public String destroy() {
        current = (" + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @") getItems().getRowData();
        selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        performDestroy();
        recreatePagination();
        recreateModel();
        return " + PP() + @"List" + PP() + @";
    }
");

            this.Src.AddLn(@"
    public String destroyAndView() {
        performDestroy();
        recreateModel();
        updateCurrentItem();
        if (selectedItemIndex >= 0) {
            return " + PP() + @"View" + PP() + @";
        } else {
            // all items were removed - go back to list
            recreateModel();
            return " + PP() + @"List" + PP() + @";
        }
    }
");

            this.Src.AddLn(@"
    private void performDestroy() {
        try {
            getFacade().remove(current);
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle(" + PP() + @"/Bundle" + PP() + @").getString(" + PP() + @"" + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"Deleted" + PP() + @"));
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, ResourceBundle.getBundle(" + PP() + @"/Bundle" + PP() + @").getString(" + PP() + @"PersistenceErrorOccured" + PP() + @"));
        }
    }
");

            this.Src.AddLn(@"
    private void updateCurrentItem() {
        int count = getFacade().count();
        if (selectedItemIndex >= count) {
            // selected index cannot be bigger than number of items:
            selectedItemIndex = count - 1;
            // go to previous page if last page disappeared:
            if (pagination.getPageFirstItem() >= count) {
                pagination.previousPage();
            }
        }
        if (selectedItemIndex >= 0) {
            current = getFacade().findRange(new int[]{selectedItemIndex, selectedItemIndex + 1}).get(0);
        }
    }
");

            this.Src.AddLn(@"
    public DataModel getItems() {
        if (items == null) {
            items = getPagination().createPageDataModel();
        }
        return items;
    }
");

            this.Src.AddLn(@"
    private void recreateModel() {
        items = null;
    }
");

            this.Src.AddLn(@"
    private void recreatePagination() {
        pagination = null;
    }
");

            this.Src.AddLn(@"
    public String next() {
        getPagination().nextPage();
        recreateModel();
        return " + PP() + @"List" + PP() + @";
    }
");

            this.Src.AddLn(@"
    public String previous() {
        getPagination().previousPage();
        recreateModel();
        return " + PP() + @"List" + PP() + @";
    }
");

            this.Src.AddLn(@"
    public SelectItem[] getItemsAvailableSelectMany() {
        return JsfUtil.getSelectItems(ejbFacade.findAll(), false);
    }
");

            this.Src.AddLn(@"
    public SelectItem[] getItemsAvailableSelectOne() {
        return JsfUtil.getSelectItems(ejbFacade.findAll(), true);
    }
");

            this.Src.AddLn(@"
    public " + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @" get" + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"(etp.vm.gen.entity." + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"PK id) {
        return ejbFacade.find(id);
    }
");

            this.Src.AddLn(@"
    @FacesConverter(forClass = " + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @".class)
    public static class " + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"ControllerConverter implements Converter {

        private static final String SEPARATOR = " + PP() + @"#" + PP() + @";
        private static final String SEPARATOR_ESCAPED = " + PP() + @"\\#" + PP() + @";
");

            this.Src.AddLn(@"
        @Override
        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {
            if (value == null || value.length() == 0) {
                return null;
            }
            " + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"Controller controller = (" + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"Controller) facesContext.getApplication().getELResolver().
                    getValue(facesContext.getELContext(), null, " + PP() + @"" + PP() + this.IBSBSGClass.MHIBSNameJavaCaseLower + @"Controller" + PP() + @");
            return controller.get" + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"(getKey(value));
        }
");

            this.Src.AddLn(@"
        etp.vm.gen.entity." + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"PK getKey(String value) {
            etp.vm.gen.entity." + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"PK key;
            String values[] = value.split(SEPARATOR_ESCAPED);
            key = new etp.vm.gen.entity." + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"PK();
            key.setTrackDate(java.sql.Date.valueOf(values[0]));
            key.setTrackType(Integer.parseInt(values[1]));
            key.setBannerId(Integer.parseInt(values[2]));
            return key;
        }
");

            this.Src.AddLn(@"
        String getStringKey(etp.vm.gen.entity." + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"PK value) {
            StringBuilder sb = new StringBuilder();
            sb.append(value.getTrackDate());
            sb.append(SEPARATOR);
            sb.append(value.getTrackType());
            sb.append(SEPARATOR);
            sb.append(value.getBannerId());
            return sb.toString();
        }
");

            this.Src.AddLn(@"
        @Override
        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {
            if (object == null) {
                return null;
            }
            if (object instanceof " + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @") {
                " + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @" o = (" + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @") object;
                return getStringKey(o.get" + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @"PK());
            } else {
                throw new IllegalArgumentException(" + PP() + @"object " + PP() + @" + object + " + PP() + @" is of type " + PP() + @" + object.getClass().getName() + " + PP() + @"; expected type: " + PP() + @" + " + PP() + this.IBSBSGClass.MHIBSNameJavaCase + @".class.getName());
            }
        }

    }

}

");
		}

        public static string PP()
        {
            return @"""";
        }
		#endregion

	}
 
}
